#!/bin/bash

CPU=2
THR=2

########################

convertsecs() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%02d:%02d:%02d\n" $h $m $s
}

#########################

drawheart () {
echo " **   **   **   **   **   **   **   **   **   **   **   **   **   **   **   ** "
echo "*  ***  * *  ***  * *  ***  * *  ***  * *  ***  * *  ***  * *  ***  * *  ***  *"
echo "*       * *       * *       * *       * *       * *       * *       * *       *"
echo " *     *   *     *   *     *   *     *   *     *   *     *   *     *   *     * "
echo "  *   *     *   *     *   *     *   *     *   *     *   *     *   *     *   *  "
echo "   * *       * *       * *       * *       * *       * *       * *       * *   "
echo "    *         *         *         *         *         *         *         *    "
}

########################

OurSabre () {
echo "STARTING SABRE!"

# Create log file for this program

echo "I will create a sabre log file for this analysis that you can find it in Results directory"
exec &> sabre.log

# Run the program

sabre se -f $DATA -b $BARCODE -u unk.fastq

exec >/dev/tty
}

########################

OurCutadapt () {
echo "Starting Cutadapt!"

#Sequence of Adapter
ADAP=AGATCGGAA

echo "I will create a cutadapt log file for this analysis that you can find in Results directory"
exec &> cutadapt.log

#Running the program
parallel -j $CPU cutadapt -a $ADAP -m 50 -o {}.fastq {}.fq ::: $(ls -1 *.fq | sed 's/.fq//')
	if [ $? -ne 0 ]
		then
			printf There is error in the cutadapt
			exit 1
	fi

exec >/dev/tty
}

##########################

OurBwa () {
echo "Starting Mapping!"

echo "I will create a bwa log file for this analysis that you can find in Results directory"
exec &> bwa.log
# Running the program
parallel -j $CPU bwa mem -t $THR $REF {}.fastq ">" {}.sam ::: $(ls -1 *.fastq | sed 's/.fastq//')
	if [ $? -ne 0 ]
		then 
			printf There is a problem in the alignment step
			exit 1
		fi
exec >/dev/tty
}

##########################

OurSamtools () {
echo "SAM to BAM Conversion"
# create a log file
echo "I will create a convert log file for this analysis that you can find in Results directory"
exec &> convert.log
# Running the program in 4 steps.
#Step 1: convert SAM format to BAM format.
parallel -j $CPU samtools view -b -S -h {}.sam ">" {}.temp.bam ::: $(ls -1 *.sam | sed 's/.sam//')
	if [ $? -ne 0 ]
		then 
			printf "There is a problem in the samtools-view step"
			exit 1
	fi
	
	
#Step 2: Sorting of BAM files
parallel -j $CPU samtools sort {}.temp.bam -o {}.sort.bam ::: $(ls -1 *.temp.bam | sed 's/.temp.bam//')
	
#Step 3: Indexing of BAM files
parallel -j $CPU samtools index {} ::: $(ls -1 *.sort.bam)
	
#Step 4: Creating a list of BAM files with path
for i in $(ls -1 *.sort.bam)
		do
			printf "$PWD/${i}\n" >> "bamlist"
			if [ $? -ne 0 ]
				then 
	
	printf "There is a problem in the production of the bam file list"
					exit 1
			fi
			done
# Well All steps are completed			
exec >/dev/tty
}

##########################

OurVcf () {
echo "Starting variant Calling!"
OUT=variantcalling


exec &> samt_var.log
samtools mpileup -g -f $REF -b bamlist > variants.bcf
	if [ $? -ne 0 ]
                        then
                                printf "There is a problem at the samtools_mpileup step"
                                exit 1
                fi
bcftools call -mv variants.bcf > variants.vcf
	if [ $? -ne 0 ]
                        then
                                printf "There is a problem at the bcf2vcf step"
                                exit 1
                fi
		
exec >/dev/tty
}

##########################



echo "This Pipeline made by CHMK as class assignment"
echo
echo "CHMK Pipeline use sabre, cutadapt ..."


echo
echo "<==============Welcome to CHMK=================>"
echo

# Ask the user for their name
echo
echo "Hello, who am I talking to?"
read name
echo


echo "Nice to meet you $name, thank you for using CHMK Pipeline"


drawheart

echo
echo "The Current time: $(date +%Y-%m-%d_%Hh-%Mm-%Ss)"
echo



echo "$name, could you please tell me where is your fastq file?"

read FASTQ_File

DATA=$FASTQ_File
echo

echo "You are doing great, now I need path for the barcodes"
read BAR
BARCODE=$BAR
echo

echo "Please enter the path to your reference genome."

read Reference
REF=$Reference

echo "$name, please enter the number of CPU. It is good to enter maximum number of CPU's you have for faster analysis"
read CPU


#Initializing thread
echo "$name, please enter the number of threads. It is good to enter 2 or more as per your machine's configuration."
read THR



STARTING_TIME=$(date -u +%s)
echo
echo "Starting time: $(date +%Y-%m-%d_%Hh-%Mm-%Ss)"
echo



echo "$name, I will create a new directory for your demultiplexed data. Its name is Results"
echo

mkdir Results

# Change path

cd Results

####################SABRE######################
OurSabre


#####################Cutadapt####################
OurCutadapt


##################MAPPING########################
OurBwa


###########Conversion SAM TO BAM###########################
OurSamtools


#################Variant Calling######################
OurVcf




echo "Ending time: $(date +%Y-%m-%d_%Hh-%Mm-%Ss)"
ENDING_TIME=$(date -u +%s)
ELAPSED_TIME="$[$ENDING_TIME-$STARTING_TIME]"
echo "The Elapsed time is: $ELAPSED_TIME seconds"
echo "or"
echo $(convertsecs $ELAPSED_TIME)
